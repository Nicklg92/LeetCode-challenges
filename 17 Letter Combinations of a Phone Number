#####################################################
##PROBLEM 17: LETTER COMBINATIONS OF A PHONE NUMBER##
#####################################################

#Difficult: Medium
#Language: Python

class Solution:

    def letterCombinations(self, digits: str) -> List[str]:

        #42 minutes and 30 seconds.
        #There is surely a more elegant way to code the final part with some additional loop to
        #avoid the hard-coding of the four cases.

        #Nonetheless, this soultion beats 90.28% of users for runtime and 
        #57,40% of users for memory, so I am ok with that.

        num_dict = {"2": ["a", "b", "c"],
                    "3": ["d", "e", "f"],
                    "4": ["g", "h", "i"],
                    "5": ["j", "k", "l"],
                    "6": ["m", "n", "o"],
                    "7": ["p", "q", "r", "s"],
                    "8": ["t", "u", "v"],
                    "9": ["w", "x", "y", "z"]}

        intermediate_list = []

        if len(digits) == 0:

            return intermediate_list

        elif len(digits) == 1:

            return num_dict[str(digits[0])]

        else: 

            for i in range(0, len(digits)):

                intermediate_list.append(num_dict[str(digits[i])])

            final_list = []

            print(intermediate_list)

            for i in range(0, len(intermediate_list) - 1):

                if len(digits) == 2:

                    for j in range(0, len(intermediate_list[i])):
            
                        for k in range(0, len(intermediate_list[i + 1])):
                    
                            final_list.append(intermediate_list[i][j] + intermediate_list[i + 1][k])

                    return final_list

                elif len(digits) == 3:

                    for j in range(0, len(intermediate_list[i])):
            
                        for k in range(0, len(intermediate_list[i + 1])):

                            for l in range(0, len(intermediate_list[i + 2])):
                    
                                final_list.append(intermediate_list[i][j] + intermediate_list[i + 1][k] + intermediate_list[i + 2][l])

                    return final_list

                else: 

                    for j in range(0, len(intermediate_list[i])):
            
                        for k in range(0, len(intermediate_list[i + 1])):

                            for l in range(0, len(intermediate_list[i + 2])):

                                for m in range(0, len(intermediate_list[i + 3])):
                    
                                    final_list.append(intermediate_list[i][j] + intermediate_list[i + 1][k] + intermediate_list[i + 2][l] + intermediate_list[i + 3][m])

                    return final_list

            








            

        

                



            

